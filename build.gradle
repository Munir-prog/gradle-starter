plugins {
    id 'java'
}
// old variant
//apply plugin: 'java'

apply from: 'script.gradle'

//apply plugin: CustomPlugin

repositories {
//    ~/.m2/repository
//    mavenLocal()
//    maven {
//        name "nexus mprog"
//        url "https://nexus.mprog/repository"
//    }
    mavenCentral()

//    on your own ssd/hdd
//    flatDir {}
}

configurations {

    def configurationImpl = getByName("implementation")
//    configurationImpl.getDependencies()
    mprog {
        description = "mprog config"
    }
    configurationImpl.extendsFrom(mprog)


    all {
        resolutionStrategy {
//            force('org.springframework:spring-aop:5.3.8')
        }
    }
}

dependencies {
//    compileOnly 'org.springframework.boot:spring-boot-dependencies:2.5.6'
//    add('implementation', [group: 'org.springframework', name: 'spring-webmvc', version: '5.3.9'])
//    add('implementation', "org.springframework:spring-webmvc:5.3.9")
    implementation("org.springframework:spring-webmvc:5.3.9") {
//        exclude(group: 'org.springframework', module: 'spring-aop')
//        transitive(false)
    }
    implementation ("org.springframework:spring-aop:5.3.9"){
//        force(true)
    }

}

//configurations.runtimeClasspath.files.each { println it}

jar {


    def jars = configurations.runtimeClasspath.files.collect { "lib/$it.name" }

    manifest {
        attributes 'Main-Class': 'com.mprog.App',
                    'Class-Path': jars.join(' ')
    }

//    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
//    from(configurations.runtimeClasspath.files.collect {project.zipTree(it) /*zipTree(it)*/})
}

task copyAllDependencies(type: Copy) {
    from(configurations.runtimeClasspath.files)
    into("$buildDir/libs/lib")
}

jar.dependsOn(copyAllDependencies)
//sourceSets {
//    main {
//        java {
//            srcDir("$buildDir/generated-sources/querydsl")
//        }
//    }
//    test {
//
//    }
//}


class CustomPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        addHelloTask(project)
    }

    void addHelloTask(Project project) {
        def map = [description: "Hello task", group: "dmdev", type: DefaultTask]
        project.task(map, "hello") {

            println "config phase. Task hello"

            doLast {
                println "Execution phase, Action 1"
            }

            doFirst {
                println "Execution phase, Action 2"
            }

            doLast {
                println "Execution phase, Action 3"
            }

            println "task: $description, group: $group, actions: $actions.size"
            println "path task: ${path}"
        }
    }
}